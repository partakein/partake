{
  "name": "postgresql",
  "description": "Installs and configures postgresql for clients or servers",
  "long_description": "Description\n===========\n\nInstalls and configures PostgreSQL as a client or a server.\n\nRequirements\n============\n\n## Platforms\n\n* Debian, Ubuntu\n* Red Hat/CentOS/Scientific (6.0+ required) - \"EL6-family\"\n* Fedora\n* SUSE\n\nTested on:\n\n* Ubuntu 10.04, 11.10, 12.04\n* Red Hat 6.1, Scientific 6.1, CentOS 6.3\n\n## Cookbooks\n\nRequires Opscode's `openssl` cookbook for secure password generation.\n\nRequires a C compiler and development headers in order to build the\n`pg` RubyGem to provide Ruby bindings in the `ruby` recipe.\n\nOpscode's `build-essential` cookbook provides this functionality on\nDebian, Ubuntu, and EL6-family.\n\nWhile not required, Opscode's `database` cookbook contains resources\nand providers that can interact with a PostgreSQL database. This\ncookbook is a dependency of database.\n\nAttributes\n==========\n\nThe following attributes are set based on the platform, see the\n`attributes/default.rb` file for default values.\n\n* `node['postgresql']['version']` - version of postgresql to manage\n* `node['postgresql']['dir']` - home directory of where postgresql\n  data and configuration lives.\n\n* `node['postgresql']['client']['packages']` - An array of package names\n  that should be installed on \"client\" systems.\n* `node['postgresql']['server']['packages']` - An array of package names\n  that should be installed on \"server\" systems.\n* `node['postgresql']['contrib']['packages']` - An array of package names\n  that could be installed on \"server\" systems for useful sysadmin tools.\n\n* `node['postgresql']['enable_pitti_ppa']` - Whether to enable the PPA\n  by Martin Pitti, which contains newer versions of PostgreSQL. See\n  __Recipes__ \"`ppa_pitti_postgresql`\" below for more information.\n\n* `node['postgresql']['enable_pgdg_yum']` - Whether to enable the yum repo\n  by the PostgreSQL Global Development Group, which contains newer versions\n  of PostgreSQL.\n\nThe following attributes are generated in\n`recipe[postgresql::server]`.\n\n* `node['postgresql']['password']['postgres']` - randomly generated\n  password by the `openssl` cookbook's library.\n\nConfiguration\n-------------\n\nThe `postgresql.conf` and `pg_hba.conf` files are dynamically\ngenerated from attributes. Each key in `node['postgresql']['config']`\nis a postgresql configuration directive, and will be rendered in the\nconfig file. For example, the attribute:\n\n    node['postgresql']['config']['listen_address'] = 'localhost'\n\nWill result in the following line in the `postgresql.conf` file:\n\n    listen_address = 'localhost'\n\nThe attributes file contains default values for Debian and RHEL\nplatform families (per the `node['platform_family']`). These defaults\nhave disparity between the platforms because they were originally\nextracted from the postgresql.conf files in the previous version of\nthis cookbook, which differed in their default config. The resulting\nconfiguration files will be the same as before, but the content will\nbe dynamically rendered from the attributes. The helpful commentary\nwill no longer be present. You should consult the PostgreSQL\ndocumentation for specific configuration details.\n\nFor values that are \"on\" or \"off\", they should be specified as literal\n`true` or `false`. String values will be used with single quotes. Any\nconfiguration option set to the literal `nil` will be skipped\nentirely. All other values (e.g., numeric literals) will be used as\nis. So for example:\n\n    node.default['postgresql']['config']['logging_collector'] = true\n    node.default['postgresql']['config']['datestyle'] = 'iso, mdy'\n    node.default['postgresql']['config']['ident_file'] = nil\n    node.default['postgresql']['config']['port] = 5432\n\nWill result in the following config lines:\n\n    logging_collector = 'on'\n    datestyle = 'iso,mdy'\n    port = 5432\n\n(no line printed for `ident_file` as it is `nil`)\n\nThe `pg_hba.conf` file is dynamically generated from the\n`node['postgresql']['pg_hba']` attribute. This attribute must be an\narray of hashes, each hash containing the authorization data. As it is\nan array, you can append to it in your own recipes. The hash keys in\nthe array must be symbols. Each hash will be written as a line in\n`pg_hba.conf`. For example, this entry from\n`node['postgresql']['pg_hba']`:\n\n    {:type => 'local', :db => 'all', :user => 'postgres', :addr => nil, :method => 'ident'}\n\nWill result in the following line in `pg_hba.conf`:\n\n    local all postgres  ident\n\nUse `nil` if the CIDR-ADDRESS should be empty (as above).\n\nRecipes\n=======\n\ndefault\n-------\n\nIncludes the client recipe.\n\nclient\n------\n\nInstalls the packages defined in the\n`node['postgresql']['client']['packages']` attribute.\n\nruby\n----\n\n**NOTE** This recipe may not currently work when installing Chef with\n  the\n  [\"Omnibus\" full stack installer](http://opscode.com/chef/install) on\n  some platforms due to an incompatibility with OpenSSL. See\n  [COOK-1406](http://tickets.opscode.com/browse/COOK-1406). You can\n  build from source into the Chef omnibus installation to work around\n  this issue.\n\nInstall the `pg` gem under Chef's Ruby environment so it can be used\nin other recipes. The build-essential packages and postgresql client\npackages will be installed during the compile phase, so that the\nnative extensions of `pg` can be compiled.\n\nserver\n------\n\nIncludes the `server_debian` or `server_redhat` recipe to get the\nappropriate server packages installed and service managed. Also\nmanages the configuration for the server:\n\n* generates a strong default password (via `openssl`) for `postgres`\n* sets the password for postgres\n* manages the `postgresql.conf` file.\n* manages the `pg_hba.conf` file.\n\nserver\\_debian\n--------------\n\nInstalls the postgresql server packages and sets up the service. You\nshould include the `postgresql::server` recipe, which will include\nthis on Debian platforms.\n\nserver\\_redhat\n--------------\n\nManages the postgres user and group (with UID/GID 26, per RHEL package\nconventions), installs the postgresql server packages, initializes the\ndatabase, and manages the postgresql service. You should include the\n`postgresql::server` recipe, which will include this on RHEL/Fedora\nplatforms.\n\ncontrib\n-------\n\nInstalls the packages defined in the\n`node['postgresql']['contrib']['packages']` attribute.\nThis is the contrib directory of the PostgreSQL distribution, which\nincludes porting tools, analysis utilities, and plug-in features that\ndatabase engineers often require. Some (like pgbench) are executable.\nOthers (like pg_buffercache) should be installed into the database.\n\nppa\\_pitti\\_postgresql\n----------------------\n\nEnables Martin Pitti's PPA for updated PostgreSQL packages.\nAutomatically included if the `node['postgresql']['enable_pitti_ppa']`\nattribute is true. Also set the\n`node['postgresql']['client']['packages']` and\n`node['postgresql']['server]['packages']` to the list of packages to\nuse from this repository, and set the `node['postgresql']['version']`\nattribute to the version to use (e.g., \"9.2\").\n\nyum\\_pgdg\\_postgresql\n---------------------\n\nEnables the PostgreSQL Global Development Group yum repository\nmaintained by Devrim G&#252;nd&#252;z for updated PostgreSQL packages.\n(The PGDG is the groups that develops PostgreSQL.)\nAutomatically included if the `node['postgresql']['enable_pgdg_yum']`\nattribute is true. Also use `override_attributes` to set a number of\nvalues that will need to have embedded version numbers. For example:\n\n    node['postgresql']['enable_pgdg_yum'] = true\n    node['postgresql']['version'] = \"9.2\"\n    node['postgresql']['dir'] = \"/var/lib/pgsql/9.2/data\"\n    node['postgresql']['client']['packages'] = [\"postgresql92\"]\n    node['postgresql']['server']['packages'] = [\"postgresql92-server\"]\n    node['postgresql']['server']['service_name'] = \"postgresql-9.2\"\n    node['postgresql']['contrib']['packages'] = [\"postgresql92-contrib\"]\n\nYou may set `node['postgresql']['pgdg']['repo_rpm_url']` attributes\nto pick up recent [PGDG repo packages](http://yum.postgresql.org/repopackages.php).\n\nResources/Providers\n===================\n\nSee the [database](http://community.opscode.com/cookbooks/database)\nfor resources and providers that can be used for managing PostgreSQL\nusers and databases.\n\nUsage\n=====\n\nOn systems that need to connect to a PostgreSQL database, add to a run\nlist `recipe[postgresql]` or `recipe[postgresql::client]`.\n\nOn systems that should be PostgreSQL servers, use\n`recipe[postgresql::server]` on a run list. This recipe does set a\npassword and expect to use it. It performs a node.save when Chef is\nnot running in `solo` mode. If you're using `chef-solo`, you'll need\nto set the attribute `node['postgresql']['password']['postgres']` in\nyour node's `json_attribs` file or in a role.\n\nOn Debian family systems, SSL will be enabled, as the packages on\nDebian/Ubuntu also generate the SSL certificates. If you use another\nplatform and wish to use SSL in postgresql, then generate your SSL\ncertificates and distribute them in your own cookbook, and set the\n`node['postgresql']['config']['ssl']` attribute to true in your\nrole/cookboook/node.\n\nChef Solo Note\n==============\n\nThe following node attribute is stored on the Chef Server when using\n`chef-client`. Because `chef-solo` does not connect to a server or\nsave the node object at all, to have the password persist across\n`chef-solo` runs, you must specify them in the `json_attribs` file\nused. For Example:\n\n    {\n      \"postgresql\": {\n        \"password\": {\n          \"postgres\": \"iloverandompasswordsbutthiswilldo\"\n        }\n      },\n      \"run_list\": [\"recipe[postgresql::server]\"]\n    }\n\nLicense and Author\n==================\n\n- Author:: Joshua Timberman (<joshua@opscode.com>)\n- Author:: Lamont Granquist (<lamont@opscode.com>)\n- Author:: Chris Roberts (<chrisroberts.code@gmail.com>)\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
  "maintainer": "Opscode, Inc.",
  "maintainer_email": "cookbooks@opscode.com",
  "license": "Apache 2.0",
  "platforms": {
    "ubuntu": ">= 0.0.0",
    "debian": ">= 0.0.0",
    "fedora": ">= 0.0.0",
    "suse": ">= 0.0.0",
    "amazon": ">= 0.0.0",
    "redhat": ">= 6.0",
    "centos": ">= 6.0",
    "scientific": ">= 6.0",
    "oracle": ">= 6.0"
  },
  "dependencies": {
    "openssl": ">= 0.0.0",
    "apt-get-update": ">= 0.0.0"
  },
  "recommendations": {
  },
  "suggestions": {
  },
  "conflicting": {
  },
  "providing": {
  },
  "replacing": {
  },
  "attributes": {
  },
  "groupings": {
  },
  "recipes": {
    "postgresql": "Includes postgresql::client",
    "postgresql::ruby": "Installs pg gem for Ruby bindings",
    "postgresql::client": "Installs postgresql client package(s)",
    "postgresql::server": "Installs postgresql server packages, templates",
    "postgresql::server_redhat": "Installs postgresql server packages, redhat family style",
    "postgresql::server_debian": "Installs postgresql server packages, debian family style"
  },
  "version": "2.2.2"
}